{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","cards","map","user","i","key","SearchBox","onSearchChange","onChange","type","placeholder","Scroll","props","console","log","style","overflow","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","App","onRequestRobots","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundary","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5e68bf0a.chunk.js","sourcesContent":["import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\treturn (\r\n\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tlet cards = robots.map((user,i) => {return (\r\n\t\t\t<Card key={user.id} id={i} name={user.name} email={user.email} />\r\n\t\t)});\r\n\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{cards}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) => {\r\n\treturn (\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input onChange={onSearchChange} className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' />\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\tconsole.log(props);\r\n\treturn <div style={{overflow: 'scroll', border: '1px solid black', height: '500px'}}>\r\n\t{props.children}\r\n\t</div>;\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {hasError: false};\r\n\t}\r\n\r\n\tcomponentDidCatch() {\r\n\t\tthis.setState({hasError: true});\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn (<h1>OOOOPS! This is not good!</h1>);\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => requestRobots(dispatch)\r\n\t}\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending  } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => \r\n\t\t\t{return robot.name.toLowerCase().includes(searchField.toLowerCase())}\r\n\t\t\t);\r\n\t\treturn isPending ? <h1>Loading...</h1> : \r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox onSearchChange={onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(robot => robot.json())\r\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error})); \r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport { createLogger } from 'redux-logger'; \nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n  \tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}